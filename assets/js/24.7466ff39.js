(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{424:function(r,a,n){"use strict";n.r(a);var t=n(56),v=Object(t.a)({},(function(){var r=this,a=r.$createElement,n=r._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[n("h1",{attrs:{id:"扩展运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展运算符"}},[r._v("#")]),r._v(" 扩展运算符")]),r._v(" "),n("p",[r._v("作用：将一个数组转为用逗号分隔的参数序列。")]),r._v(" "),n("p",[r._v("//该运算符主要用于函数调用。")]),r._v(" "),n("p",[r._v("function push(array, ...items) {\narray.push(...items);\n}")]),r._v(" "),n("p",[r._v("function add(x, y) {\nreturn x + y;\n}")]),r._v(" "),n("p",[r._v("var numbers = [4, 38];\nadd(...numbers) // 42")]),r._v(" "),n("p",[r._v("//扩展运算符取代apply方法的一个实际的例子，应用Math.max方法，简化求出一个数组最大元素的写法。\n// ES5 的写法\nMath.max.apply(null, [14, 3, 77])")]),r._v(" "),n("p",[r._v("// ES6 的写法\nMath.max(...[14, 3, 77])")]),r._v(" "),n("p",[r._v("// 等同于\nMath.max(14, 3, 77);\n　\n//通过push函数，将一个数组添加到另一个数组的尾部\n// ES5的 写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\nArray.prototype.push.apply(arr1, arr2);")]),r._v(" "),n("p",[r._v("// ES6 的写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\narr1.push(...arr2);\n　　\n//合并数组\n// ES5\n[1, 2].concat(more)\n// ES6\n[1, 2, ...more]")]),r._v(" "),n("p",[r._v("var arr1 = ['a', 'b'];\nvar arr2 = ['c'];\nvar arr3 = ['d', 'e'];")]),r._v(" "),n("p",[r._v("// ES5的合并数组\narr1.concat(arr2, arr3);\n// [ 'a', 'b', 'c', 'd', 'e' ]")]),r._v(" "),n("p",[r._v("// ES6的合并数组\n[...arr1, ...arr2, ...arr3]\n// [ 'a', 'b', 'c', 'd', 'e' ]\n　\n扩展运算符将字符串转为真正的数组\n[...'hello']\n// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]")])])}),[],!1,null,null,null);a.default=v.exports}}]);